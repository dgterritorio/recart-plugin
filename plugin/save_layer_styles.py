#
# Esta script Python permite guardar os estilos de todos os layers na base de dados, a partir da consola do QGIS.
# Depois de guardados em base de dados, os comandos seguintes podem ser usados para gerar um ficheiro SQL com esses estilos.
# 
# PossÃ­veis problemas e acertos:
# select * from public.layer_styles ls where type = 'Unknown geometry';
# select * from public.layer_styles ls where not useasdefault;
# select * from public.layer_styles ls where f_table_schema != 'public';
# delete from public.layer_styles ls where f_table_schema != 'public';
# update public.layer_styles set useasdefault = True where not useasdefault;
# update public.layer_styles set type = 'Point' where type = 'Unknown geometry';
#
# Export layer styles from database to file
# pg_dump service=portimao -t layer_styles --no-owner --no-privileges --attribute-inserts > layer_styles.new.sql
# cd plugin/convert/processing/v2.0.2/
# pg_dump service=5430_carttop1_en1_moleanos_porto_de_mos_20250603 -t layer_styles --no-owner --no-privileges --attribute-inserts > layer_styles.new.sql
# cd plugin/convert/processing/v2.0.1/
# pg_dump service=5378_carttop2_povoa_varzim_20250303 -t layer_styles --no-owner --no-privileges --attribute-inserts > layer_styles.new.sql
# cd plugin/convert/processing/v1.1.2/
# pg_dump service=5382_carttop2_ilhavo_20250319 -t layer_styles --no-owner --no-privileges --attribute-inserts > layer_styles.new.sql

# sed -i "s/VALUES ([0-9]\+, '[^']\+', '[^']\+', /VALUES ( current_database(), '{schema}', /g" layer_styles.new.sql
# sed -i "s/layer_styles (id,/layer_styles (/g" layer_styles.new.sql
# sed -i "s/owner, ui, update_time, //g" layer_styles.new.sql
# sed -i "s/'[a-z]\+', NULL, '202[^']\+', //g" layer_styles.new.sql
# sed -E -i "s/CREATE (TABLE|SEQUENCE)/CREATE \1 IF NOT EXISTS/g" layer_styles.new.sql
# sed -i "/ALTER TABLE/,+1d" layer_styles.new.sql
# sed -i "/SELECT pg_catalog.setval/d" layer_styles.new.sql
# sed -i "/ALTER SEQUENCE/d" layer_styles.new.sql
# sed -i "/CREATE SEQUENCE/,+6d" layer_styles.new.sql
# sed -i "s/id integer NOT NULL,/id integer generated by default as identity NOT NULL PRIMARY KEY,/" layer_styles.new.sql
# sed -i '/CREATE TABLE/,+1000000!d' layer_styles.new.sql
# sed -i '/^--/d' layer_styles.new.sql
# sed -i '/\\restrict/d' layer_styles.new.sql
# sed -i '/\\unrestrict/d' layer_styles.new.sql

# mv layer_styles.sql layer_styles.old.sql
# mv layer_styles.new.sql layer_styles.sql

# teste com um layer ativo
# layer = iface.activeLayer()
# AllStyleCategories = LayerConfiguration | Symbology | Symbology3D | Labeling | Fields | Forms | Actions | MapTips | Diagrams | AttributeTable | Rendering | CustomProperties | GeometryOptions | Relations | Temporal | Legend | Elevation | Notes,   
# export_categories =  QgsMapLayer.StyleCategory.LayerConfiguration | QgsMapLayer.StyleCategory.Symbology | QgsMapLayer.StyleCategory.Labeling | QgsMapLayer.StyleCategory.Fields | QgsMapLayer.StyleCategory.Rendering | QgsMapLayer.StyleCategory.Relations
# layer.saveStyleToDatabase(name=layer.name(),description="Default style for {}".format(layer.name()), useAsDefault=True, uiFileContent="", categories = export_categories)


mapGeometryType = {
    0: "Point",
    1: "Line",
    2: "Polygon",
    3: "UnknownGeometry",
    4: "NullGeometry",
}

export_categories =  QgsMapLayer.StyleCategory.LayerConfiguration | QgsMapLayer.StyleCategory.Symbology | QgsMapLayer.StyleCategory.Labeling | QgsMapLayer.StyleCategory.Fields | QgsMapLayer.StyleCategory.Rendering | QgsMapLayer.StyleCategory.Relations

layers = QgsProject.instance().mapLayers()

for layer in layers.values():
    if layer.type() == QgsMapLayer.VectorLayer:
        if mapGeometryType[layer.geometryType()] != "NullGeometry":
            print(layer.name())
            layer.deleteStyleFromDatabase
            # layer.saveStyleToDatabase(name=layer.name(),description="Default style for {}".format(layer.name()), useAsDefault=True, uiFileContent="")
            layer.saveStyleToDatabase(name=layer.name(),description="Default style for {}".format(layer.name()), useAsDefault=True, uiFileContent="", categories = export_categories)
            